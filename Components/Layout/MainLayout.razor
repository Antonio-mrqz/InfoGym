@using Newtonsoft.Json;
@using Services

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthService AuthService
@inherits LayoutComponentBase

<style>
    .avatar-hover {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .avatar-hover:hover {
    transform: scale(1.2);
    }
</style>

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h4" Class="ml-3">InfoGym</MudText>
        <MudSpacer />

        @if (_usuario == null)
        {
            <!-- Si NO hay usuario autenticado, mostrar Login y Register -->
            <MudLink Color="Color.Inherit" Class="ml-3" Href="/login">Login</MudLink>
            <MudLink Color="Color.Inherit" Class="ml-3" Href="/register">Register</MudLink>
        }
        else
        {
            <!-- Si hay usuario autenticado, mostrar Avatar -->
            <MudButton OnClick="@RedirigirPerfil" Class="avatar-hover"  Variant="Variant.Text" Style="min-width: unset; padding: 0;">
                <MudAvatar Size="Size.Medium"
                Color="Color.Dark"
                Variant="Variant.Filled"
                Style="cursor: pointer;">
                    @_usuario.LetraNombre
                </MudAvatar>
            </MudButton>
            <MudButton OnClick="@(async () => await LogoutClicked())" Variant="Variant.Text" Style="min-width: unset; padding: 0;">
                <MudIcon Icon="@Icons.Material.Filled.Logout"
                Size="Size.Large"
                Class="avatar-hover"
                Style="margin-left: 7px;cursor: pointer;" />
            </MudButton>
        }
    </MudAppBar>

    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="p-0 m-0">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = false;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private Usuario? _usuario = null; // Variable para almacenar el usuario autenticado

    protected override async Task OnInitializedAsync()
    {
        _theme = new MudTheme()
            {
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };

        await CargarUsuario();
    }

    private async Task CargarUsuario()
    {
        try
        {
            // Obtener el usuario almacenado en localStorage
            var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");
            if (!string.IsNullOrEmpty(userJson))
            {
                _usuario = JsonConvert.DeserializeObject<Usuario>(userJson);
                _drawerOpen = true;
            }
        }
        catch
        {
            _usuario = null; // Si hay un error, se asume que no hay usuario autenticado
        }

        StateHasChanged(); // Forzar actualización de la interfaz
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private readonly PaletteDark _darkPalette = new()
    {
            Primary = "#D90429",
            Surface = "#222222",
            Background = "#121212",
            AppbarText = "#FFFFFF",
            AppbarBackground = "#D90429",
            DrawerBackground = "#1A1A1A",
            ActionDefault = "#D90429",
            TextPrimary = "#FFFFFF",
            TextSecondary = "#B0B0B0",
            DrawerIcon = "#D90429",
            DrawerText = "#FFFFFF",
            TableLines = "#2A2A2A",
            Divider = "#2A2A2A",
    };

    private void RedirigirPerfil()
    {
        Navigation.NavigateTo("/perfil"); 
    }

    private async Task LogoutClicked()
    {
        await AuthService.Logout();
        Navigation.NavigateTo("/", forceLoad: true);
    }
}