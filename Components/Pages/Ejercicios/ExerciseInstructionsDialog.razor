@namespace MudBlazorWebApp1.Pages
@using MudBlazorWebApp1.Models
@using MudBlazor
@using Services
@inject AuthService AuthService
@inject RutinaService RutinaService

<style>
    .instruction-list .mud-list-item {
        align-items: start;
        padding: 4px 0;
    }

    .instruction-number {
        color: var(--mud-palette-primary);
        font-weight: 500;
        min-width: 28px;
    }

    .exercise-dialog .mud-dialog-content {
        max-height: 70vh;
        overflow-y: auto;
    }

    .form-container {
        border-top: 1px solid var(--mud-palette-divider);
        margin-top: 16px;
        padding-top: 16px;
    }
</style>

<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true" Class="exercise-dialog">
    <TitleContent>
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Class="mr-2" Color="Color.Primary" />
            <MudText Typo="Typo.h4" Color="Color.Primary" Style="font-family: 'Oswald', sans-serif;">@Exercise?.Name</MudText>
        </div>
    </TitleContent>

    <DialogContent>
        @if (showSuccessMessage)
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Outlined" Dense="true" Class="mb-3">
                Ejercicio "@Exercise?.Name" agregado a "@GetDayName(selectedDayId)" correctamente.
            </MudAlert>
        }
        <MudDivider Class="my-4" Color="Color.Primary" />

        <MudGrid Spacing="4" Justify="Justify.FlexStart">
            <!-- Imagen -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="8" Class="h-100 rounded-lg">
                    <MudCardMedia Image="@Exercise?.GifUrl"
                                  Class="rounded-lg"
                                  Height="300"
                                  Style="object-fit: cover;" />

                    @if (usuario != null)
                    {
                        <!-- Formulario debajo del GIF -->
                        <MudCardContent Class="form-container">
                            <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-3" Style="font-family: 'Oswald', sans-serif;">
                                <MudIcon Icon="@Icons.Material.Filled.PlaylistAdd" Class="mr-2" />
                                Agregar a Rutina
                            </MudText>

                            <MudSelect T="int"
                                       Label="Seleccionar Día"
                                       HelperText="Elige a qué día quieres agregar este ejercicio"
                                       Variant="Variant.Outlined"
                                       AnchorOrigin="Origin.BottomCenter"
                                       @bind-Value="selectedDayId">
                                @foreach (var day in availableDays)
                                {
                                    <MudSelectItem Value="@day.Id">@day.Name</MudSelectItem>
                                }
                            </MudSelect>

                            <div class="d-flex justify-end mt-4">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Success"
                                           StartIcon="@Icons.Material.Filled.Save"
                                           OnClick="SaveToRoutine"
                                           Disabled="@(selectedDayId == 0)"
                                           Class="rounded-pill">
                                    Guardar en Rutina
                                </MudButton>
                            </div>
                        </MudCardContent>
                    }
                </MudCard>
            </MudItem>

            <!-- Detalles -->
            <MudItem xs="12" md="6" Class="pl-md-4 pl-0 mt-4 mt-md-0">
                <MudStack Spacing="4">
                    <!-- Detalles Principales -->
                    <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-surface);">
                        <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-3" Style="font-family: 'Oswald', sans-serif;">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                            Detalles del Ejercicio
                        </MudText>

                        <MudStack Spacing="3">
                            <MudItem xs="12" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Accessibility" Class="mr-2" Size="Size.Small" Color="Color.Primary" />
                                <div>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Parte del cuerpo</MudText>
                                    <MudText Typo="Typo.body1" Class="font-weight-medium">@Exercise?.BodyPart</MudText>
                                </div>
                            </MudItem>

                            <MudItem xs="12" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.LocationSearching" Class="mr-2" Size="Size.Small" Color="Color.Primary" />
                                <div>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Músculo objetivo</MudText>
                                    <MudText Typo="Typo.body1" Class="font-weight-medium">@Exercise?.Target</MudText>
                                </div>
                            </MudItem>

                            <MudItem xs="12" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Construction" Class="mr-2" Size="Size.Small" Color="Color.Primary" />
                                <div>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Equipo</MudText>
                                    <MudText Typo="Typo.body1" Class="font-weight-medium">@Exercise?.Equipment</MudText>
                                </div>
                            </MudItem>
                        </MudStack>
                    </MudPaper>

                    <!-- Sección de Instrucciones -->
                    @if (Exercise?.Instructions != null && Exercise.Instructions.Any())
                    {
                        <MudPaper Elevation="0" Class="pa-4 rounded-lg" Style="background-color: var(--mud-palette-surface);">
                            <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-3" Style="font-family: 'Oswald', sans-serif;">
                                <MudIcon Icon="@Icons.Material.Filled.ListAlt" Class="mr-2" />
                                Instrucciones
                            </MudText>

                            <MudList Dense="true" Class="instruction-list" T="string">
                                @for (int i = 0; i < Exercise.Instructions.Count; i++)
                                {
                                    var index = i; // Crear una variable local para evitar problemas de captura
                                    <MudListItem>
                                        <MudText Typo="Typo.body1" Class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                                                     Size="Size.Small"
                                                     Class="mr-2"
                                                     Color="Color.Primary" />
                                            <span>@($"{index + 1}. {Exercise.Instructions[index]}")</span>
                                        </MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudPaper>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="mt-3 mb-3">
                            No hay instrucciones disponibles para este ejercicio.
                        </MudAlert>
                    }
                </MudStack>
            </MudItem>
        </MudGrid>
    </DialogContent>

    <DialogActions>
        <div Class="px-4 pb-4">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Primary"
                       EndIcon="@Icons.Material.Filled.Close"
                       OnClick="Close"
                       Class="rounded-pill"
                       FullWidth="true"
                       FullWidthMd="false">
                Cerrar
            </MudButton>
        </div>
    </DialogActions>

</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    private Usuario? usuario;

    [Parameter]
    public Exercise Exercise { get; set; }

    private bool showSuccessMessage = false;
    protected override async Task OnInitializedAsync()
    {
        usuario = await AuthService.GetCurrentUser();
    }

    // Clase para representar los días con Id y Nombre
    private class DayOfWeek
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    // Dias de la semana con IDs numéricos
    private List<DayOfWeek> availableDays = new List<DayOfWeek>
    {
        new DayOfWeek { Id = 1, Name = "Lunes" },
        new DayOfWeek { Id = 2, Name = "Martes" },
        new DayOfWeek { Id = 3, Name = "Miércoles" },
        new DayOfWeek { Id = 4, Name = "Jueves" },
        new DayOfWeek { Id = 5, Name = "Viernes" },
        new DayOfWeek { Id = 6, Name = "Sábado" },
        new DayOfWeek { Id = 7, Name = "Domingo" },
    };

    // Variable para almacenar el ID del día seleccionado (1-7)
    private int selectedDayId = 0;

    // Método para obtener el nombre del día a partir del ID
    private string GetDayName(int dayId)
    {
        return availableDays.FirstOrDefault(d => d.Id == dayId)?.Name ?? "Desconocido";
    }

    void Close() => MudDialog.Close();

    // Método para guardar el ejercicio en el día seleccionado
    private async Task SaveToRoutine()
    {
        if (selectedDayId > 0 && Exercise != null && usuario != null)
        {
            bool exito = await RutinaService.AgregarEjercicioAsync(usuario.Id, Exercise.Id, selectedDayId);

            if (exito)
            {
                showSuccessMessage = true;
                StateHasChanged();

                await Task.Delay(3000);

                await InvokeAsync(() =>
                {
                    showSuccessMessage = false;
                    MudDialog.Close();
                });
            }
            else
            {
                // Por si falla
                MudDialog.Cancel();
            }
        }
    }
}