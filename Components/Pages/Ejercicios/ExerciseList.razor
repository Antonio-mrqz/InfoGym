@page "/exercises"
@using MudBlazorWebApp1.Models
@using MudBlazorWebApp1.Services
@using MudBlazorWebApp1.Pages
@inject IExerciseService ExerciseService
@inject IDialogService DialogService

<style>
    .hover-card {
    transition: all 0.3s ease;
    transform: translateY(0);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    background-color: #222222;
    border: 1px solid #222222; /* Borde del mismo color que el fondo */
    }

    .hover-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 10px 20px rgba(217, 4, 41, 0.3);
    border: 1px solid rgba(217, 4, 41, 0.5); /* Borde rojo en hover */
    }

    .fondo-difuminado {
    backdrop-filter: blur(10px);
    }

    .mud-pagination-item {
    list-style: none !important;
    }
</style>

@* TITULO Y SEPARADOR *@
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 mb-4 text-center">
    <div style="display: flex; align-items: center; justify-content: center;">
        <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Style="font-size: 3rem; margin-right: 0.5rem;" />
        <MudText Typo="Typo.h2"
        Class="font-weight-bold"
        Style="display: flex; align-items: center; font-family: 'Oswald', sans-serif; font-size: 3rem;">
            Ejercicios
        </MudText>
    </div>
    <MudDivider Class="mt-2 mx-auto" Style="height: 3px; background-color: #D90429; width: 100px;" />
</MudContainer>


@* CONTENIDO *@
<MudContainer Class="mt-16">

    <MudItem xs="12" class="mb-4 d-flex align-center flex-wrap gap-4">
        <MudTextField @bind-Value="searchTextTemp"
                      Label="Nombre"
                      Variant="Variant.Filled"
                      Dense="true"
                      Style="min-width: 250px;" />

        <MudSelect T="string" Label="Parte del cuerpo"
                   @bind-Value="selectedBodyPartTemp"
                   Dense="true" Variant="Variant.Filled"
                   Style="min-width: 250px;" Clearable="true">
            @if (bodyPartList != null)
            {
                @foreach (var part in bodyPartList)
                {
                    <MudSelectItem Value="@part">@part</MudSelectItem>
                }
            }
        </MudSelect>
        <MudSelect T="string" Label="Músculo Objetivo"
                   @bind-Value="selectedTargetTemp"
                   Dense="true" Variant="Variant.Filled"
                   Style="min-width: 250px;" Clearable="true">
            @if (targetList != null)
            {
                @foreach (var musculo in targetList)
                {
                    <MudSelectItem Value="@musculo">@musculo</MudSelectItem>
                }
            }
        </MudSelect>

        <MudSelect T="string" Label="Equipamiento Necesario"
                   @bind-Value="selectedEquipmentTemp"
                   Dense="true" Variant="Variant.Filled"
                   Style="min-width: 250px;" Clearable="true">
            @if (equipmentList != null)
            {
                @foreach (var eq in equipmentList)
                {
                    <MudSelectItem Value="@eq">@eq</MudSelectItem>
                }
            }
        </MudSelect>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AplicarFiltro">
            Filtrar
        </MudButton>
    </MudItem>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
    }

    <MudGrid>
        @if (isLoading)
        {
            <MudItem xs="12" Class="d-flex justify-center">
                <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
            </MudItem>
        }
        else if (pagedExercises == null || !pagedExercises.Any())
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">No se encontraron ejercicios con esas especificaciones.</MudAlert>
            </MudItem>
        }
        else
        {

            // Ejercicios
            @foreach (var exercise in pagedExercises)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Style="height: 100%;" Class="hover-card">
                        <MudCardMedia Image="@exercise.GifUrl" Height="200" />
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Color="Color.Primary" Style="font-family: 'Oswald', sans-serif; font-weight: 700;">@exercise.Name</MudText>
                            <MudText Typo="Typo.body2">Parte del cuerpo: @exercise.BodyPart</MudText>
                            <MudText Typo="Typo.body2">Músculo objetivo: @exercise.Target</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text"
                            Color="Color.Primary"
                            OnClick="() => OpenExerciseDialog(exercise)">
                                Ver instrucciones
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }

        }
    </MudGrid>
    <!-- Paginación -->
    @if (!isLoading && pagedExercises != null && pagedExercises.Any())
    {
        <MudPagination ShowFirstButton="true" ShowLastButton="true"
        Count="totalPages"
        Selected="@currentPage"
        SelectedChanged="ChangePage"
        Class="mt-4 d-flex justify-center"
        Style="margin-bottom:10px"/>
    }

</MudContainer>

@code {
    private List<Exercise>? exercises;
    private List<Exercise>? pagedExercises;
    private Exercise? selectedExercise;
    private bool dialogVisible;
    private bool isLoading = true;
    private string errorMessage = "";

    private int currentPage = 1;
    private int itemsPerPage = 8; // Número de ejercicios por página
    private IEnumerable<Exercise> filteredExercises =>
        (exercises ?? Enumerable.Empty<Exercise>())
            .Where(e =>
                (string.IsNullOrWhiteSpace(selectedBodyPart) || e.BodyPart.Equals(selectedBodyPart, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(selectedEquipment) || e.Equipment.Equals(selectedEquipment, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(selectedTarget) || e.Target.Equals(selectedTarget, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(searchText) ||
                 e.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)));
    private int totalPages => (filteredExercises.Count() + itemsPerPage - 1) / itemsPerPage;

    private List<string>? bodyPartList;
    private string? selectedBodyPartTemp;
    private string? selectedBodyPart;

    private List<string>? targetList;
    private string? selectedTargetTemp;
    private string? selectedTarget;

    private List<string>? equipmentList;
    private string? selectedEquipmentTemp;
    private string? selectedEquipment;

    private string? searchTextTemp;
    private string? searchText;

    [Inject] private NavigationManager Navigation { get; set; }

    // Funcion para poder ir a la página anterior
    private void GoBack()
    {
        Navigation.NavigateTo("/", forceLoad: true);
    }

    // Funcion que carga los ejercicios de la API al cargarse la página
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            exercises = await ExerciseService.GetExercisesAsync();
            bodyPartList = await ExerciseService.GetBodyPartList();
            equipmentList = await ExerciseService.GetEquipmentList();
            targetList = await ExerciseService.GetTargetList();

            if (exercises == null || !exercises.Any())
            {
                errorMessage = "No se pudieron cargar los ejercicios. Verifica la conexión a la API.";
            }
            else
            {
                UpdatePagedExercises();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los ejercicios: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        UpdatePagedExercises();
    }

    private void UpdatePagedExercises()
    {
        if (exercises == null) return;

        int startIndex = (currentPage - 1) * itemsPerPage;
        pagedExercises = filteredExercises.Skip(startIndex).Take(itemsPerPage).ToList();

    }
    private void OnFilterChanged(string? value)
    {
        currentPage = 1;
        UpdatePagedExercises();
    }
    private async Task OpenExerciseDialog(Exercise exercise)
    {
        var parameters = new DialogParameters<ExerciseInstructionsDialog>
        {
            { x => x.Exercise, exercise }
        };

        var options = new DialogOptions
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "fondo-difuminado"
            };

        DialogService.Show<ExerciseInstructionsDialog>("Instrucciones del ejercicio", parameters, options);
    }
    private void AplicarFiltro()
    {
        selectedBodyPart = selectedBodyPartTemp;
        selectedTarget = selectedTargetTemp;
        selectedEquipment = selectedEquipmentTemp;
        searchText = searchTextTemp;
        currentPage = 1;
        UpdatePagedExercises();
    }

}