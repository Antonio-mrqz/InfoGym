@page "/rutina"
@using MudBlazorWebApp1.Models
@using MudBlazorWebApp1.Services
@using MudBlazorWebApp1.Pages
@inject Services.AuthService AuthService
@inject Services.RutinaService RutinaService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@using MudBlazor
@using MudBlazorWebApp1.Models

<style>
    .fondo-difuminado {
        backdrop-filter: blur(10px);
    }

    .mud-table-row:hover {
        background-color: rgba(217, 4, 41, 0.10) !important;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 mb-4 text-center">
    <div style="display: flex; align-items: center; justify-content: center;">
        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Style="font-size: 3rem; margin-right: 0.5rem;" />
        <MudText Typo="Typo.h2"
                 Class="font-weight-bold"
                 Style="display: flex; align-items: center; font-family: 'Oswald', sans-serif; font-size: 3rem;">
            Rutina
        </MudText>
    </div>
    <MudDivider Class="mt-2 mx-auto" Style="height: 3px; background-color: #D90429; width: 100px;" />
</MudContainer>

@if (usuario == null || rutina == null)
{
    <MudItem xs="12" Class="d-flex justify-center">
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
    </MudItem>
}
else
{
    @foreach (var dia in diasSemana.OrderBy(d => d.Key))
    {
        var ejerciciosDelDia = rutina.Where(e => e.DiaSemana == dia.Key).ToList();
        if (ejerciciosDelDia.Any())
        {
            <MudPaper Elevation="4" Class="pa-4 mb-4" Style="margin-inline: 5%; border-radius: 12px;">
                <MudText Typo="Typo.h5" Class="mb-3" Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Class="mr-2" /> @dia.Value
                </MudText>

                <MudTable Items="@ejerciciosDelDia" Dense="true" Hover="true" Bordered="false" Class="mud-elevation-1" Striped="true" Outlined="true">
                    <HeaderContent>
                        <MudTh>Nombre</MudTh>
                        <MudTh>Parte del Cuerpo</MudTh>
                        <MudTh>Músculo Objetivo</MudTh>
                        <MudTh>Equipo</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Nombre">@context.Ejercicio.Name</MudTd>
                        <MudTd DataLabel="Parte del Cuerpo">@context.Ejercicio.BodyPart</MudTd>
                        <MudTd DataLabel="Músculo Objetivo">@context.Ejercicio.Target</MudTd>
                        <MudTd DataLabel="Equipo">@context.Ejercicio.Equipment</MudTd>
                        <MudTd DataLabel="Acciones">
                            <MudStack Direction="Row" Spacing="1">
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                               Color="Color.Info"
                                               Size="Size.Medium"
                                               Style="width: 40px; height: 40px;"
                                               OnClick="() => OpenExerciseDialog(context.Ejercicio)"
                                               AriaLabel="Ver instrucciones" />

                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Medium"
                                               Style="width: 40px; height: 40px;"
                                               OnClick="() => BorraEjercicio(context.Id)"
                                               AriaLabel="Eliminar ejercicio" />
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
    }
}

@if (rutina?.Count == 0)
{
    <MudPaper Class="pa-4 my-4 d-flex flex-column align-center justify-center" Style="margin: 5%">
        <MudText Typo="Typo.h6" Class="mb-2">Todavía no has agregado ningún ejercicio a tu rutina.</MudText>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.FitnessCenter"
                   OnClick="@(() => Navigation.NavigateTo("/exercises"))">
            Ver Ejercicios
        </MudButton>
    </MudPaper>
}

@code {
    private Usuario? usuario;
    private List<EjercicioConDia>? rutina;
    private bool _initialized;

    private readonly Dictionary<int, string> diasSemana = new()
    {
        { 1, "Lunes" },
        { 2, "Martes" },
        { 3, "Miércoles" },
        { 4, "Jueves" },
        { 5, "Viernes" },
        { 6, "Sábado" },
        { 7, "Domingo" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized)
        {
            _initialized = true;

            usuario = await AuthService.GetCurrentUserAsync();
            if (usuario == null)
            {
                Navigation.NavigateTo("/login", forceLoad: true);
                return;
            }

            rutina = await RutinaService.GetEjerciciosConDiaUsuarioAsync(usuario.Id);

            StateHasChanged();
        }
    }

    private async Task BorraEjercicio(int idEjercicioRutina)
    {
        bool eliminado = await RutinaService.EliminarEjercicioAsync(idEjercicioRutina);

        if (eliminado)
        {
            rutina = await RutinaService.GetEjerciciosConDiaUsuarioAsync(usuario.Id);
            Snackbar.Add("Ejercicio eliminado correctamente.", Severity.Success);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("No se pudo eliminar el ejercicio.", Severity.Error);
        }
    }

    private async Task OpenExerciseDialog(Exercise exercise)
    {
        var parameters = new DialogParameters<ExerciseInstructionsDialog2>
        {
            { x => x.Exercise, exercise }
        };

        var options = new DialogOptions
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                BackgroundClass = "fondo-difuminado"
            };

        DialogService.Show<ExerciseInstructionsDialog2>("Instrucciones del ejercicio", parameters, options);
    }
}
