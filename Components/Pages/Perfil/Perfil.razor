@page "/perfil"
@using Services
@inject AuthService AuthService
@inject UserService UserService
@inject PesoService PesoService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@using Layout

@using MudBlazor
@using MudBlazorWebApp1.Models

<style>
    input[type="file"] {
        margin-top: 0.5rem;
    }

    .avatar-wrapper {
        position: relative;
        width: 200px;
        height: 200px;
        margin: 0 auto;
        border-radius: 50%;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .avatar-img {
        width: 100%;
        height: 100%;
        border: 4px solid #f5f5f5;
        border-radius: 50%;
        overflow: hidden;
        background-color: #121212;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .avatar-overlay {
        position: absolute;
        bottom: -5px;
        right: -25px;
        background-color: var(--mud-palette-primary);
        border-radius: 50%;
        padding: 10px;
        cursor: pointer;
        transition: all 0.3s;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        z-index: 2;
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .avatar-overlay:hover {
            background-color: var(--mud-palette-primary-darken);
            transform: scale(1.1);
        }

        .avatar-overlay .mud-icon {
            color: white;
            font-size: 24px;
            margin: 0; /* quita espacios extra */
            line-height: 1; /* evita que el ícono se desplace hacia abajo */
        }

    .foto-guardar-btn {
        margin-top: 16px;
        transition: all 0.3s;
        border-radius: 20px;
        padding: 5px 20px;
    }

        .foto-guardar-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .mud-chart-tooltip {
        display: none !important;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Elevation="4" Class="pa-6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Mi Perfil</MudText>

        @if (usuario == null)
        {
            <MudItem xs="12" Class="d-flex justify-center">
                <MudProgressCircular Indeterminate="true" Style="height:70px;width:70px;" />
            </MudItem>
        }
        else
        {
            <MudGrid Class="mb-4" Justify="Justify.Center">
                <MudItem xs="12" Class="d-flex flex-column align-items-center">
                    <div class="avatar-wrapper">
                        @if (!string.IsNullOrEmpty(usuario?.FotoBase64))
                        {
                            <img src="@FotoSrc" class="avatar-img" />
                        }
                        else
                        {
                            <div class="avatar-img d-flex align-items-center justify-content-center bg-dark text-white">
                                <span style="font-size: 5rem;">@usuario?.Nombre?[0]</span>
                            </div>
                        }

                        <label for="fotoPerfilInput" class="avatar-overlay">
                            <MudIcon Icon="@Icons.Material.Filled.PhotoCamera" />
                        </label>
                        <InputFile id="fotoPerfilInput" class="d-none" OnChange="CargarFoto" />
                    </div>
                </MudItem>
            </MudGrid>
            <MudForm @ref="formPerfil">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Nombre" @bind-Value="usuario.Nombre" Variant="Variant.Outlined" Required="true" Validation="@(new Func<string, string>(ValidarTextoSoloLetras))" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Primer Apellido" @bind-Value="usuario.Apellido1" Variant="Variant.Outlined" Required="true" Validation="@(new Func<string, string>(ValidarTextoSoloLetras))" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Segundo Apellido" @bind-Value="usuario.Apellido2" Variant="Variant.Outlined" Validation="@(new Func<string, string>(ValidarTextoSoloLetras))" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Email" @bind-Value="usuario.Email" Variant="Variant.Outlined" Required="true" Validation="@(new Func<string, string>(ValidarEmail))" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField T="string" Label="Teléfono" @bind-Value="telefonoStr" Variant="Variant.Outlined" Required="true" InputType="InputType.Telephone" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(ValidarTelefonoConRegex))" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int" Label="Altura (cm)" @bind-Value="alturaValue" Variant="Variant.Outlined" Required="true" Min="50" Max="300" Immediate="true" Validation="@(new Func<int, string>(ValidarAlturaNumeric))" />
                    </MudItem>
                    <MudItem xs="12" class="mt-4">
                        <MudButton OnClick="ActualizarPerfil" Variant="Variant.Filled" Color="Color.Primary">
                            <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-2" /> Guardar cambios
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        }
    </MudPaper>

    @if (usuario != null)
    {
        <MudPaper Class="pa-6 mt-6">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Historial de Peso</MudText>

            @if (_series.Count == 0)
            {
                <MudAlert Severity="Severity.Info">No hay datos de peso registrados.</MudAlert>
            }
            else
            {
                <MudChart ChartType="ChartType.Line" ChartSeries="@_series" XAxisLabels="@_xAxisLabels" Width="100%" Height="350px" />
            }

            <MudDivider Class="my-4" />

            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudTextField Label="Peso Actual(kg)" @bind-Value="pesoActual" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="kg" />
                    <MudButton OnClick="GuardarPeso" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2 w-100">
                        <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-2" /> Guardar peso
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    }
</MudContainer>

@code {
    private Usuario? usuario;
    private double pesoActual;
    private string telefonoStr = "";
    private int alturaValue;
    private bool _primeraCarga = true;

    [CascadingParameter] public Usuario? LayoutUsuario { get; set; }
    [CascadingParameter] public MainLayout? Layout { get; set; }

    private List<ChartSeries> _series = new();
    private string[] _xAxisLabels = Array.Empty<string>();
    private MudForm? formPerfil;

    private string FotoSrc => string.IsNullOrEmpty(usuario?.FotoBase64)
        ? string.Empty
        : $"data:image/png;base64,{usuario.FotoBase64}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _primeraCarga)
        {
            _primeraCarga = false;

            usuario = await AuthService.GetCurrentUserAsync();
            if (usuario == null)
            {
                Navigation.NavigateTo("/login", forceLoad: true);
                return;
            }

            usuario = await UserService.GetUsuarioPorIdAsync(usuario.Id);

            if (usuario?.Telefono != null)
                telefonoStr = usuario.Telefono.ToString();

            if (usuario?.Altura > 0)
                alturaValue = usuario.Altura;

            if (usuario != null) await CargarHistorial();

            StateHasChanged();
        }
    }

    private async Task CargarHistorial()
    {
        var historial = await PesoService.ObtenerHistorialPesos(usuario.Id);
        if (historial.Count == 0)
        {
            _series.Clear();
            _xAxisLabels = Array.Empty<string>();
            return;
        }

        pesoActual = historial.Last().Valor;

        _xAxisLabels = historial
            .Select(p => $"{p.Fecha:dd/MM}")
            .ToArray();

        _series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Peso",
                Data = historial.Select(p => (double)p.Valor).ToArray(),
            }
        };
    }

    private async Task GuardarPeso()
    {
        if (usuario == null || pesoActual <= 0) return;

        bool ok = await PesoService.GuardarPeso(usuario.Id, pesoActual);
        if (ok)
        {
            await CargarHistorial();
            Snackbar.Add("Peso registrado correctamente.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Hubo un error al registrar el peso.", Severity.Error);
        }
    }

    private async Task ActualizarPerfil()
    {
        if (formPerfil is not null)
        {
            await formPerfil.Validate();

            if (!formPerfil.IsValid)
            {
                Snackbar.Add("Por favor, corrija los errores del formulario.", Severity.Warning);
                return;
            }
        }

        usuario.Telefono = Convert.ToInt32(telefonoStr);
        usuario.Altura = alturaValue;

        bool ok = await UserService.ActualizarUsuario(usuario);

        if (ok)
        {
            Snackbar.Add("Perfil actualizado correctamente.", Severity.Success);

            if (Layout is not null)
                await Layout.ActualizarFoto(usuario.FotoBase64);

            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Error al actualizar el perfil.", Severity.Error);
        }
    }

    private string ValidarEmail(string email)
    {
        var emailRegex = new System.Text.RegularExpressions.Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");
        return string.IsNullOrWhiteSpace(email) || !emailRegex.IsMatch(email) ? "Email no válido" : null;
    }

    private IEnumerable<string> ValidarTelefonoConRegex(string telefono)
    {
        if (string.IsNullOrWhiteSpace(telefono))
        {
            yield return "El teléfono es obligatorio";
            yield break;
        }

        if (!System.Text.RegularExpressions.Regex.IsMatch(telefono, @"^\d{9}$"))
        {
            yield return "El teléfono debe contener exactamente 9 dígitos";
        }
    }

    private string ValidarAlturaNumeric(int altura)
    {
        if (altura < 50 || altura > 300)
            return "Altura debe estar entre 50 y 300 cm";

        return null;
    }

    private string ValidarTextoSoloLetras(string texto)
    {
        if (string.IsNullOrWhiteSpace(texto))
            return "Este campo es obligatorio";

        return System.Text.RegularExpressions.Regex.IsMatch(texto, @"^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$")
            ? null
            : "Solo se permiten letras y espacios.";
    }

    private async Task CargarFoto(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            using var stream = archivo.OpenReadStream(1024 * 1024 * 5); // Máx 5MB
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();
            usuario.FotoBase64 = Convert.ToBase64String(bytes);
            StateHasChanged();
        }
    }
}