@page "/login"
@using System.ComponentModel.DataAnnotations
@inject Services.AuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<div class="vh-100 d-flex justify-center align-center" style="margin-top: 15%">
    <MudPaper Elevation="8" Class="pa-6" Style="width: 100%; max-width: 400px;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">
            Iniciar Sesión
        </MudText>
        <MudForm Model="@loginModel" IsValidChanged="@(isValid => isFormValid = isValid)">
            <MudTextField Label="Correo Electrónico"
                          @bind-Value="loginModel.Email"
                          For="@(() => loginModel.Email)"
                          Variant="Variant.Outlined"
                          Required="true"
                          Type="email"
                          Immediate="true"
                          Class="w-100"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email" />
            <div style="position: relative;" class="w-100 mt-3">
                <MudTextField T="string"
                              Label="Contraseña"
                              @bind-Value="loginModel.Password"
                              For="@(() => loginModel.Password)"
                              Variant="Variant.Outlined"
                              Required="true"
                              InputType="@PasswordInput"
                              Immediate="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Lock"
                              Class="w-100"
                              Style="padding-right: 40px;" />

                <MudIconButton Icon="@PasswordToggleIcon"
                               OnClick="@TogglePasswordVisibility"
                               Color="Color.Default"
                               Size="Size.Small"
                               Style="position: absolute; top: 20px; right: 10px;" />
            </div>
            <MudButton OnClick="LoginUser"
                       Disabled="!isFormValid"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       Class="mt-4 w-100">
                <MudIcon Icon="@Icons.Material.Filled.Login" Class="mr-2" /> Ingresar
            </MudButton>
        </MudForm>
        <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
            ¿No tienes cuenta?
            <MudLink Href="/register" Color="Color.Primary">Regístrate</MudLink>
        </MudText>
    </MudPaper>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isFormValid = false;
    InputType PasswordInput => IsPasswordVisible ? InputType.Text : InputType.Password;
    private bool _checked = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_checked)
        {
            var user = await AuthService.GetCurrentUser();
            if (user != null)
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
    }

    private async Task LoginUser()
    {
        try
        {
            // Llamar al servicio de autenticación para verificar las credenciales
            var usuario = await AuthService.Login(loginModel.Email, loginModel.Password);

            if (usuario != null)
            {
                // Si el login es exitoso, navegar al dashboard o página principal
                Snackbar.Add("Inicio de Sesión exitoso. Bienvenido!", Severity.Success);
                await Task.Delay(500);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                // Si las credenciales son incorrectas
                Snackbar.Add("Credenciales incorrectas, por favor intente nuevamente.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // Si hay un error en el proceso de login
            Snackbar.Add($"Error al iniciar sesión: {ex.Message}", Severity.Error);
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El correo es obligatorio")]
        [EmailAddress(ErrorMessage = "Correo inválido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [MinLength(8, ErrorMessage = "Debe tener al menos 8 caracteres")]
        public string Password { get; set; }
    }

    private bool IsPasswordVisible = false;

    private string PasswordToggleIcon => IsPasswordVisible
        ? Icons.Material.Filled.VisibilityOff
        : Icons.Material.Filled.Visibility;

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }
}