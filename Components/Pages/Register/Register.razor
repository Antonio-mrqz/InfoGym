@page "/register"
@using System.ComponentModel.DataAnnotations
@inject Services.AuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<div class="vh-100 d-flex justify-center align-center" style="margin-top: 13%">
    <MudPaper Elevation="8" Class="pa-6" Style="width: 100%; max-width: 400px;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">
            Registro de Usuario
        </MudText>

        <MudForm Model="@registerModel" @ref="form" IsValidChanged="@(isValid => isFormValid = isValid)">
            <MudTextField Label="Nombre"
                          @bind-Value="registerModel.Name"
                          For="@(() => registerModel.Name)"
                          Variant="Variant.Outlined"
                          Required="true"
                          Immediate="true"
                          Class="w-100"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Person" />

            <MudTextField Label="Correo Electrónico"
                          @bind-Value="registerModel.Email"
                          For="@(() => registerModel.Email)"
                          Variant="Variant.Outlined"
                          Required="true"
                          Type="email"
                          Immediate="true"
                          Class="w-100 mt-3"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email" />

            <MudTextField Label="Contraseña"
                          @bind-Value="registerModel.Password"
                          For="@(() => registerModel.Password)"
                          Variant="Variant.Outlined"
                          Required="true"
                          InputType="@PasswordInput"
                          Immediate="true"
                          Class="w-100 mt-3"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock" />

            <MudTextField Label="Confirmar Contraseña"
                          @bind-Value="registerModel.ConfirmPassword"
                          For="@(() => registerModel.ConfirmPassword)"
                          Variant="Variant.Outlined"
                          Required="true"
                          InputType="@PasswordInput"
                          Immediate="true"
                          Class="w-100 mt-3"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock" />

            <MudButton OnClick="RegisterUser"
                       Disabled="!isFormValid"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       Class="mt-4 w-100">
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-2" /> Registrarse
            </MudButton>
        </MudForm>

        <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
            ¿Ya tienes cuenta?
            <MudLink Href="/login" Color="Color.Primary">Iniciar Sesión</MudLink>
        </MudText>
    </MudPaper>
</div>

@code
{
    private MudForm form;
    InputType PasswordInput = InputType.Password;
    private RegisterModel registerModel = new();

    private bool isFormValid = false;
    private bool _checked = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_checked)
        {
            var user = await AuthService.GetCurrentUserAsync();
            if (user != null)
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
    }
    private async Task RegisterUser()
    {

        // Verificar coincidencia de contraseñas
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            Snackbar.Add("Las contraseñas no coinciden", Severity.Error);
            return;
        }

        try
        {
            // Llamar al servicio de autenticación para registrar
            bool registrationResult = await AuthService.Register(registerModel.Name, registerModel.Email, registerModel.Password);

            if (registrationResult)
            {
                Snackbar.Add("Registro exitoso", Severity.Success);
                Navigation.NavigateTo("/login");
            }
            else
            {
                Snackbar.Add("Error en el registro. Puede que el usuario ya exista.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        [MinLength(2, ErrorMessage = "El nombre debe tener al menos 2 caracteres")]
        [MaxLength(50, ErrorMessage = "El no nombre puede tener mas de 50 caracteres")]
        [RegularExpression(@"^[A-Z][a-zA-Z]*$", ErrorMessage = "El nombre debe comenzar con una letra mayúscula")]
        public string Name { get; set; }

        [Required(ErrorMessage = "El correo es obligatorio")]
        [EmailAddress(ErrorMessage = "Correo inválido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [MinLength(8, ErrorMessage = "Debe tener al menos 8 caracteres")]
        [MaxLength(30, ErrorMessage = "El no nombre puede tener mas de 30 caracteres")]
        [RegularExpression(@"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*(),.?\:{}|<>]).{8,}$", ErrorMessage = "La contraseña debe contener mayúsculas, minúsculas, números y caracteres especiales")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirmar contraseña es obligatorio")]
        [Compare(nameof(Password), ErrorMessage = "Las contraseñas no coinciden")]
        public string ConfirmPassword { get; set; }
    }
}